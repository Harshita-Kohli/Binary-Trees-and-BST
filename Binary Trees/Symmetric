Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 Example 1:
Input: root = [1,2,2,3,4,4,3]
Output: true

Example 2:
Input: root = [1,2,2,null,3,null,3]
Output: false
 
Constraints:
The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
<--------------------------------------------------------------------------->
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
*/
class Solution {
public:
   //****If a tree is symmetric around its center, then it is same as its mirror image, ie. it is a mirror of itself!! 
    bool isMirror(TreeNode* root1, TreeNode* root2)
    {
        if(root1==NULL && root2==NULL)//base case
        {
            return true;
        }
        // if(root1!=root2) //base case
        // {
        //     return false;
        // }
        
        if(root1 && root2 && root1->val==root2->val)//if the roots of the trees are not NULL and are equal, only then we go for recursion
        {
            bool ans1 = isMirror(root1->left, root2->right);//the left subtree of tree1 should be mirror image of right subtree of root2
            bool ans2 = isMirror(root1->right, root2->left);//the right subtree of tree1 should be mirror image of left subtree of tree2
            if(ans1 && ans2)//if both are true, then the entire tree is mirror of itself
            {
                return true;
            }
        }
        return false;    
    }
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
        {
            return true;
        }
       bool res = isMirror(root,root);//we pass the same tree to isMirror() to check if the tree is a mirror of itself
        return res;
    }
};

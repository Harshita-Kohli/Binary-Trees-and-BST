129. Sum Root to Leaf Numbers
Medium

3307

67

Add to List

Share
You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

 

Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
Example 2:


Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.
--------------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// RECURSIVE APPROACH:
// class Solution {
// public:
//     void helper(TreeNode* root,int temp,int &ans)
//     {
//         //Base Case 1:
//         if(root==NULL)
//         {
//             return;
//         }
//         temp = temp*10 + root->val;//we compute the number formed bhy going from root to leaf node
//         //Base Case 2:
//         if(root->left==NULL && root->right==NULL)
//         {
//             ans+=temp;//if we reach the leaf node, we sum up the temp number into our final answer
//             return;
//         }
        
        
//         //recursive call to left subtree:
//         helper(root->left,temp,ans);
//         //recursive call to right subtree:
//         helper(root->right,temp,ans);
//     }
//     int sumNumbers(TreeNode* root) {
//        if(root==NULL)
//        {
//            return 0;
//        }
//         int ans = 0;
//         helper(root,0,ans);//call to recursive function
//         return ans;
//     }
// };
// ITERATIVE APPROACH:
class Solution {
public:
     int sumNumbers(TreeNode* root) {
         int ans = 0;
         stack<pair<TreeNode*,int>>st;
         st.push({root,0});
         // int temp = root; //at root, the number formed will be = root
         // pair<TreeNode*,int>top = st.top();
         // st.pop();
         while(!st.empty())
         {
             pair<TreeNode*,int>top = st.top();
             st.pop();
             TreeNode* cur_node = top.first;
             int temp = top.second;
             if(cur_node!=NULL)
             {
                 temp = temp*10+cur_node->val;
                 if(cur_node->left==NULL && cur_node->right==NULL)//leaf node
                 {
                     ans+=temp;
                 }
                 else //not a leaf node
                 {
                    if(cur_node->right)
                    {
                        st.push({top.first->right,temp});
                    }
                    if(cur_node->left)
                    {
                        st.push({top.first->left,temp});
                    }
                     
                 }
             }
         }
         return ans;
     }
};
